// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package models

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
)

var _ = (*blockMarshaling)(nil)

func (b Block) MarshalJSON() ([]byte, error) {
	type Block struct {
		Number           hexutil.Uint64 `json:"number"`
		TimeStamp        hexutil.Uint64 `json:"timestamp"`
		Hash             common.Hash    `json:"hash"`
		ParentHash       common.Hash    `json:"parentHash"`
		StateRoot        common.Hash    `json:"stateRoot"`
		TransactionsRoot common.Hash    `json:"transactionsRoot"`
		ReceiptsRoot     common.Hash    `json:"receiptsRoot"`
		Size             hexutil.Uint64 `json:"size"`
		GasUsed          hexutil.Uint64 `json:"gasUsed"`
		GasLimit         hexutil.Uint64 `json:"gasLimit"`
		Transactions     []common.Hash  `json:"transactions"`
		LogsBloom        types.Bloom    `json:"logBloom"`
	}
	var enc Block
	enc.Number = b.Number
	enc.TimeStamp = b.TimeStamp
	enc.Hash = b.Hash
	enc.ParentHash = b.ParentHash
	enc.StateRoot = b.StateRoot
	enc.TransactionsRoot = b.TransactionsRoot
	enc.ReceiptsRoot = b.ReceiptsRoot
	enc.Size = b.Size
	enc.GasUsed = b.GasUsed
	enc.GasLimit = b.GasLimit
	enc.Transactions = b.Transactions
	enc.LogsBloom = b.LogsBloom
	return json.Marshal(&enc)
}

func (b *Block) UnmarshalJSON(input []byte) error {
	type Block struct {
		Number           *hexutil.Uint64 `json:"number"`
		TimeStamp        *hexutil.Uint64 `json:"timestamp"`
		Hash             *common.Hash    `json:"hash"`
		ParentHash       *common.Hash    `json:"parentHash"`
		StateRoot        *common.Hash    `json:"stateRoot"`
		TransactionsRoot *common.Hash    `json:"transactionsRoot"`
		ReceiptsRoot     *common.Hash    `json:"receiptsRoot"`
		Size             *hexutil.Uint64 `json:"size"`
		GasUsed          *hexutil.Uint64 `json:"gasUsed"`
		GasLimit         *hexutil.Uint64 `json:"gasLimit"`
		Transactions     []common.Hash   `json:"transactions"`
		LogsBloom        *types.Bloom    `json:"logBloom"`
	}
	var dec Block
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Number != nil {
		b.Number = *dec.Number
	}
	if dec.TimeStamp != nil {
		b.TimeStamp = *dec.TimeStamp
	}
	if dec.Hash != nil {
		b.Hash = *dec.Hash
	}
	if dec.ParentHash != nil {
		b.ParentHash = *dec.ParentHash
	}
	if dec.StateRoot != nil {
		b.StateRoot = *dec.StateRoot
	}
	if dec.TransactionsRoot != nil {
		b.TransactionsRoot = *dec.TransactionsRoot
	}
	if dec.ReceiptsRoot != nil {
		b.ReceiptsRoot = *dec.ReceiptsRoot
	}
	if dec.Size != nil {
		b.Size = *dec.Size
	}
	if dec.GasUsed != nil {
		b.GasUsed = *dec.GasUsed
	}
	if dec.GasLimit != nil {
		b.GasLimit = *dec.GasLimit
	}
	if dec.Transactions != nil {
		b.Transactions = dec.Transactions
	}
	if dec.LogsBloom != nil {
		b.LogsBloom = *dec.LogsBloom
	}
	return nil
}
